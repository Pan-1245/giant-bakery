name: Cloud Run Deployment Staging

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  PROJECT_ID: ${{ secrets.CLOUD_RUN_PROJECT_NAME }}
  REGION: asia-southeast1
  REPO_NAME: cukedoh-stg

on:
  push:
    branches:
      - develop

jobs:
  Google-Cloud-Run-Build-&-Deploy:
    runs-on: ubuntu-latest
    environment:
      name: 'Staging'
    steps:
      - uses: actions/checkout@v4

      - id: "auth"
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: "${{ secrets.CLOUD_RUN_SERVICE_ACCOUNT }}"

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Authorize Docker push
        run: gcloud auth configure-docker

      - name: Install Vercel CLI
        run: yarn global add vercel@latest

      - name: Pull Vercel Environment Information
        run: |
          vercel pull --yes --environment=preview --git-branch=${{ vars.BRANCH }} --token=${{ secrets.VERCEL_TOKEN }}
          mv .vercel/.env.preview.local .env

      - name: Build and tag the docker image
        run: |-
          docker build . --tag gcr.io/$PROJECT_ID/$REPO_NAME:$GITHUB_SHA

      - name: Push the image to the Google Container Registry (GCR)
        run: |-
          docker push gcr.io/$PROJECT_ID/$REPO_NAME:$GITHUB_SHA

      - name: Deploy
        run: |-
          gcloud run deploy $REPO_NAME \
          --allow-unauthenticated \
          --region $REGION \
          --image gcr.io/$PROJECT_ID/$REPO_NAME:$GITHUB_SHA \
          --platform "managed" \
          --quiet

  Vercel-Build-And-Deploy:
    runs-on: ubuntu-latest
    environment:
      name: 'Staging'
    steps:
      - uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: yarn global add vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --git-branch=${{ vars.BRANCH }} --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project & Generate Prisma Client Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts
        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
