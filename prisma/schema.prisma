// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Auth Model ----------------------------------------------------------------------

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String            @id @default(uuid())
  name           String?
  email          String?           @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  phone          String?
  role           Role              @default(CUSTOMER)
  accounts       Account[]
  sessions       Session[]
  orders         Order[]
  addresses      CustomerAddress[]
}

model VerificationToken {
  identifier String   @id @default(uuid())
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// System Model ----------------------------------------------------------------------

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  type      CartType
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[]
}

model CartItem {
  id            String       @id @default(uuid())
  quantity      Int
  type          CartItemType
  presetCakesId String?
  presetCake    Cake?        @relation(fields: [presetCakesId], references: [id], onDelete: Cascade)
  customCakeId  String?      @unique
  customCake    CustomCake?  @relation(fields: [customCakeId], references: [id], onDelete: Cascade)
  refreshmentId String?      @unique
  refreshment   Refreshment? @relation(fields: [refreshmentId], references: [id], onDelete: Cascade)
  snackBoxId    String?      @unique
  snackBox      SnackBox?    @relation(fields: [snackBoxId], references: [id], onDelete: Cascade)
  cartId        String
  cart          Cart         @relation(fields: [cartId], references: [id], onDelete: Cascade)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime?    @updatedAt
}

model CustomerAddress {
  id          String @id @default(uuid())
  cFirstName  String
  cLastName   String
  address     String
  district    String
  subdistrict String
  province    String
  postcode    String
  phone       String

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Cake {
  id            String    @id @default(uuid())
  name          String
  remark        String?
  unitTypeId    String?
  quantity      Int       @default(0)
  imageFileName String?
  image         String?
  type          CakeType
  price         Float
  weight        Float
  height        Float
  length        Float
  width         Float
  isActive      Boolean
  isDeleted     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  variants   Variant[]
  orderItems OrderItem[]
  cartItems  CartItem[]
  CustomCake CustomCake[]
  unitType   UnitType?    @relation(fields: [unitTypeId], references: [id])
}

model CustomCake {
  id        String   @id @default(uuid())
  name      String
  price     Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cakeId     String
  cake       Cake        @relation(fields: [cakeId], references: [id])
  variants   Variant[]
  orderItems OrderItem[]
  cartItems  CartItem?
}

model Variant {
  id            String      @id @default(uuid())
  name          String
  imageFileName String?
  image         String?
  type          VariantType
  isActive      Boolean
  isVisualized  Boolean
  isDeleted     Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  deletedAt     DateTime?

  cakes       Cake[]
  customCakes CustomCake[]
}

model Refreshment {
  id            String               @id @default(uuid())
  name          String
  description   String?
  remark        String?
  quantity      Int                  @default(0)
  unitTypeId    String?
  imageFileName String?
  image         String?
  type          RefreshmentType
  category      RefreshmentCategory?
  status        StockStatus
  minQty        Int
  maxQty        Int
  currQty       Int
  weight        Float
  height        Float
  length        Float
  width         Float
  price         Float
  isActive      Boolean
  isDeleted     Boolean              @default(false)
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  deletedAt     DateTime?

  snackBox   SnackBox?   @relation(fields: [snackBoxId], references: [id])
  snackBoxId String?
  orderItems OrderItem[]
  cartItems  CartItem[]
  unitType   UnitType?   @relation(fields: [unitTypeId], references: [id])
}

model SnackBox {
  id           String        @id @default(uuid())
  price        Float
  refreshments Refreshment[]
  orderItems   OrderItem[]
  cartItems    CartItem?
}

model Order {
  id          String       @id @default(uuid())
  weight      Float
  width       Float
  length      Float
  height      Float
  price       Float
  type        OrderType
  delivery    DeliveryType
  receivedVia ReceivedVia
  status      OrderStatus
  orderedAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  user       User        @relation(fields: [userId], references: [id])
  payment    Payment     @relation(fields: [paymentId], references: [id])
  discount   Discount    @relation(fields: [discountId], references: [id])
  userId     String      @unique
  paymentId  String
  discountId String
  orderItems OrderItem[]
}

model OrderItem {
  id    String @id @default(uuid())
  qty   Int
  price Float

  cake         Cake        @relation(fields: [cakeId], references: [id])
  customCake   CustomCake  @relation(fields: [customCakeId], references: [id])
  refreshment  Refreshment @relation(fields: [snackId], references: [id])
  snackBox     SnackBox    @relation(fields: [snackBoxId], references: [id])
  order        Order?      @relation(fields: [orderId], references: [id])
  cakeId       String
  snackId      String
  customCakeId String
  snackBoxId   String
  orderId      String?
}

model UnitType {
  id          String        @id @default(uuid())
  name_th     String
  refreshment Refreshment[]
  cake        Cake[]
}

model Payment {
  id        String        @id @default(uuid())
  amount    Float
  provider  String
  type      PaymentType
  status    PaymentStatus
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  order     Order[]
}

model Discount {
  id        String       @id @default(uuid())
  condition String
  pct       String // percentage
  type      DiscountType
  isActive  Boolean
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  order     Order[]
}

// Enum -----------------------------------------------------------------------------------

enum Role {
  CUSTOMER
  ADMIN
}

enum RefreshmentType {
  BAKERY
  BEVERAGE
}

enum RefreshmentCategory {
  BREAD
  PIE
  COOKIE
  SNACK
}

enum CakeType {
  CUSTOM
  PRESET
}

enum CartItemType {
  PRESET_CAKE
  CUSTOM_CAKE
  REFRESHMENT
  SNACK_BOX
}

enum CartType {
  MEMBER
  GUEST
}

enum VariantType {
  BASE
  FILLINGS
  FROSTINGS
  CREAM
}

enum StockStatus {
  IN_STOCK
  LOW
  OUT_OF_STOCK
}

enum OrderType {
  WHOLESALE
  RETAIL
}

enum ReceivedVia {
  PICK_UP
  DELIVERY
}

enum DeliveryType {
  NORMAL
  CONTROL // Temprature control.
}

enum OrderStatus {
  PENDING_ORDER
  ON_PROCESS
  PENDING_PAYMENT
  PENDING_DELIVERY
  COMPLETED
  CANCELLED
}

enum PaymentType {
  FULL_PAYMENT
  PARTIAL_PAYMENT
}

enum PaymentStatus {
  COMPLETE
  INCOMPLETE
}

enum DiscountType {
  NORMAL
  SNACK_BOX
}
