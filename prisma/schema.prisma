// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Auth Model ----------------------------------------------------------------------

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String            @id @default(uuid())
  firstName      String            @default("")
  lastName       String            @default("")
  name           String?
  email          String?           @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  phone          String?
  role           Role              @default(CUSTOMER)
  accounts       Account[]
  sessions       Session[]
  orders         Order[]
  addresses      CustomerAddress[]
  payment        Payment[]
}

model VerificationToken {
  identifier String   @id @default(uuid())
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// System Model ----------------------------------------------------------------------

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  type      CartType
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[]
}

model CartItem {
  id                  String             @id @default(uuid())
  quantity            Int
  type                CartItemType
  customerCakeId      String?            @unique
  customerCake        CustomerCake?      @relation(fields: [customerCakeId], references: [id], onDelete: Cascade)
  refreshmentId       String?            @unique
  refreshment         Refreshment?       @relation(fields: [refreshmentId], references: [id], onDelete: Cascade)
  snackBoxId          String?            @unique
  snackBox            SnackBox?          @relation(fields: [snackBoxId], references: [id], onDelete: Cascade)
  cartId              String
  cart                Cart               @relation(fields: [cartId], references: [id], onDelete: Cascade)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime?          @updatedAt
  OrderCustomerCake   OrderCustomerCake? @relation(fields: [orderCustomerCakeId], references: [id])
  orderCustomerCakeId String?
}

model CustomerAddress {
  id          String @id @default(uuid())
  cFirstName  String
  cLastName   String
  address     String
  district    String
  subdistrict String
  province    String
  postcode    String
  phone       String

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Cake {
  id            String    @id @default(uuid())
  name          String
  description   String?
  remark        String?
  quantity      Int       @default(0)
  imageFileName String?
  imagePath     String?
  image         String?
  type          CakeType
  price         Float
  weight        Float
  height        Float
  length        Float
  width         Float
  isActive      Boolean
  isDeleted     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  sizes              MasterCakeSize[]
  bases              MasterCakeBase[]
  fillings           MasterCakeFilling[]
  creams             MasterCakeCream[]
  topEdges           MasterCakeTopEdge[]
  bottomEdges        MasterCakeBottomEdge[]
  decorations        MasterCakeDecoration[]
  surfaces           MasterCakeSurface[]
  customerCakes      CustomerCake[]
  OrderCustomerCakes OrderCustomerCake[]
}

model MasterCakeSize {
  id            String         @id @default(uuid())
  name          String
  cakes         Cake[]
  customerCakes CustomerCake[]

  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  isDeleted Boolean   @default(false)
  deletedAt DateTime?
}

model MasterCakeBase {
  id            String         @id @default(uuid())
  name          String
  cakes         Cake[]
  customerCakes CustomerCake[]

  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  isDeleted Boolean   @default(false)
  deletedAt DateTime?
}

model MasterCakeFilling {
  id            String         @id @default(uuid())
  name          String
  cakes         Cake[]
  customerCakes CustomerCake[]

  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  isDeleted Boolean   @default(false)
  deletedAt DateTime?
}

model MasterCakeCream {
  id            String         @id @default(uuid())
  name          String
  cakes         Cake[]
  customerCakes CustomerCake[]
  imageFileName String?
  imagePath     String?
  image         String?

  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  isDeleted Boolean   @default(false)
  deletedAt DateTime?
}

model MasterCakeTopEdge {
  id            String         @id @default(uuid())
  name          String
  cakes         Cake[]
  customerCakes CustomerCake[]
  imageFileName String?
  imagePath     String?
  image         String?

  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  isDeleted Boolean   @default(false)
  deletedAt DateTime?
}

model MasterCakeBottomEdge {
  id            String         @id @default(uuid())
  name          String
  cakes         Cake[]
  customerCakes CustomerCake[]
  imageFileName String?
  imagePath     String?
  image         String?

  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  isDeleted Boolean   @default(false)
  deletedAt DateTime?
}

model MasterCakeDecoration {
  id            String         @id @default(uuid())
  name          String
  cakes         Cake[]
  customerCakes CustomerCake[]
  imageFileName String?
  imagePath     String?
  image         String?

  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  isDeleted Boolean   @default(false)
  deletedAt DateTime?
}

model MasterCakeSurface {
  id            String         @id @default(uuid())
  name          String
  cakes         Cake[]
  customerCakes CustomerCake[]
  imageFileName String?
  imagePath     String?
  image         String?

  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  isDeleted Boolean   @default(false)
  deletedAt DateTime?
}

model CustomerCake {
  id        String   @id @default(uuid())
  name      String
  price     Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type      CakeType

  cakeId              String
  cake                Cake                  @relation(fields: [cakeId], references: [id])
  orderCakes          OrderCustomerCake[]
  CartItems           CartItem[]
  size                MasterCakeSize?       @relation(fields: [sizeId], references: [id])
  base                MasterCakeBase?       @relation(fields: [baseId], references: [id])
  filling             MasterCakeFilling?    @relation(fields: [fillingId], references: [id])
  cream               MasterCakeCream?      @relation(fields: [creamId], references: [id])
  topEdge             MasterCakeTopEdge?    @relation(fields: [topEdgeId], references: [id])
  bottomEdge          MasterCakeBottomEdge? @relation(fields: [bottomEdgeId], references: [id])
  decoration          MasterCakeDecoration? @relation(fields: [decorationId], references: [id])
  surface             MasterCakeSurface?    @relation(fields: [surfaceId], references: [id])
  sizeId              String?
  baseId              String?
  fillingId           String?
  creamId             String?
  creamColor          String?
  topEdgeId           String?
  topEdgeColor        String?
  bottomEdgeId        String?
  bottomEdgeColor     String?
  decorationId        String?
  surfaceId           String?
  orderCustomerCakeId String?
}

model Refreshment {
  id            String               @id @default(uuid())
  name          String
  description   String?
  remark        String?
  quantity      Int                  @default(0)
  imageFileName String?
  imagePath     String?
  image         String?
  type          RefreshmentType
  category      RefreshmentCategory?
  status        StockStatus
  minQty        Int
  maxQty        Int
  currQty       Int
  weight        Float
  height        Float
  length        Float
  width         Float
  price         Float
  isActive      Boolean
  isDeleted     Boolean              @default(false)
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  deletedAt     DateTime?
  unitType      String               @default("กล่อง")
  unitRatio     Int?

  CartItem                 CartItem?
  SnackBoxRefreshment      SnackBoxRefreshment[]
  orderRefreshment         OrderRefreshment[]
  orderSnackBoxRefreshment OrderSnackBoxRefreshment[]
}

model SnackBox {
  id            String                @id @default(uuid())
  price         Float
  name          String                @default("")
  description   String?
  imageFileName String?
  imagePath     String?
  image         String?
  weight        Float                 @default(0)
  height        Float                 @default(0)
  length        Float                 @default(0)
  width         Float                 @default(0)
  isActive      Boolean               @default(true)
  isDeleted     Boolean               @default(false)
  deletedAt     DateTime?
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  type          SnackBoxType          @default(CUSTOM)
  packageType   SnackBoxPackageType   @default(SNACK_BOX_S)
  beverage      SnackBoxBeverage      @default(NONE)
  cartItems     CartItem?
  refreshments  SnackBoxRefreshment[]
  orderSnackBox OrderSnackBox[]
}

model SnackBoxRefreshment {
  id            String      @id @default(uuid())
  refreshmentId String
  refreshment   Refreshment @relation(fields: [refreshmentId], references: [id], onDelete: Cascade)
  snackBoxId    String
  snackBox      SnackBox    @relation(fields: [snackBoxId], references: [id], onDelete: Cascade)
}

model Order {
  id            String      @id @default(uuid())
  status        OrderStatus
  receivedVia   ReceivedVia @default(PICK_UP)
  paymentType   PaymentType
  email         String      @default("default@gmail.com")
  subTotalPrice Float
  discountPrice Float
  shippingFee   Float
  totalPrice    Float
  orderedAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  user     User       @relation(fields: [userId], references: [id])
  payment  Payment[]
  discount Discount[]
  userId   String
  remark   String?

  // Address
  cFirstName       String
  cLastName        String
  address          String?
  district         String?
  subdistrict      String?
  province         String?
  postcode         String?
  phone            String?
  orderCake        OrderCustomerCake[]
  orderRefreshment OrderRefreshment[]
  orderSnackBox    OrderSnackBox[]
}

model OrderCustomerCake {
  id            String  @id @default(uuid())
  name          String
  description   String?
  remark        String?
  quantity      Int     @default(0)
  imageFileName String?
  imagePath     String?
  image         String?
  pricePer      Float
  price         Float
  weight        Float
  height        Float
  length        Float
  width         Float

  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String

  cakeId   String?
  cake     Cake?    @relation(fields: [cakeId], references: [id])
  cakeType CakeType

  customerCake   CustomerCake? @relation(fields: [customerCakeId], references: [id])
  customerCakeId String?

  CartItem        CartItem[]
  size            String?
  base            String?
  filling         String?
  cream           String?
  creamColor      String?
  topEdge         String?
  topEdgeColor    String?
  bottomEdge      String?
  bottomEdgeColor String?
  decoration      String?
  surface         String?
}

model OrderRefreshment {
  id            String               @id @default(uuid())
  name          String
  description   String?
  remark        String?
  quantity      Int                  @default(0)
  imageFileName String?
  imagePath     String?
  image         String?
  type          RefreshmentType
  category      RefreshmentCategory?
  weight        Float
  height        Float
  length        Float
  width         Float
  pricePer      Float
  price         Float
  unitType      String               @default("กล่อง")
  unitRatio     Int?

  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String

  refreshment   Refreshment? @relation(fields: [refreshmentId], references: [id])
  refreshmentId String?
}

model OrderSnackBox {
  id            String                     @id @default(uuid())
  name          String
  quantity      Int
  pricePer      Float
  price         Float
  imageFileName String?
  imagePath     String?
  image         String?
  type          SnackBoxType
  packageType   SnackBoxPackageType        @default(SNACK_BOX_S)
  beverage      SnackBoxBeverage           @default(NONE)
  refreshments  OrderSnackBoxRefreshment[]
  order         Order                      @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId       String

  snackBoxId String?
  snackBox   SnackBox? @relation(fields: [snackBoxId], references: [id])
}

model OrderSnackBoxRefreshment {
  id              String               @id @default(uuid())
  name            String
  description     String?
  remark          String?
  imageFileName   String?
  imagePath       String?
  image           String?
  type            RefreshmentType
  category        RefreshmentCategory?
  weight          Float
  height          Float
  length          Float
  width           Float
  price           Float
  OrderSnackBox   OrderSnackBox        @relation(fields: [orderSnackBoxId], references: [id], onDelete: Cascade)
  orderSnackBoxId String
  unitType        String               @default("กล่อง")
  unitRatio       Int?

  refreshment   Refreshment? @relation(fields: [refreshmentId], references: [id])
  refreshmentId String?
}

model Payment {
  id        String        @id @default(uuid())
  amount    Float
  type      PaymentMethod
  createdAt DateTime      @default(now())
  order     Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  userId    String
  user      User          @relation(fields: [userId], references: [id])
}

model Discount {
  id        String       @id @default(uuid())
  condition String
  pct       String // percentage
  type      DiscountType
  isActive  Boolean
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  order     Order[]
}

// Enum -----------------------------------------------------------------------------------

enum Role {
  CUSTOMER
  ADMIN
}

enum RefreshmentType {
  BAKERY
  BEVERAGE
}

enum RefreshmentCategory {
  BREAD
  PIE
  COOKIE
  SNACK
  CAKE
}

enum CakeType {
  CUSTOM
  PRESET
}

enum CartItemType {
  CAKE
  REFRESHMENT
  SNACK_BOX
}

enum CartType {
  MEMBER
  GUEST
}

enum StockStatus {
  IN_STOCK
  LOW
  OUT_OF_STOCK
}

enum ReceivedVia {
  PICK_UP
  DELIVERY
}

enum OrderStatus {
  PENDING_PAYMENT1
  PENDING_ORDER
  ON_PROCESS
  PENDING_PAYMENT2
  PENDING_DELIVERY
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  CARD
  PROMPTPAY
}

enum PaymentType {
  SINGLE
  INSTALLMENT
}

enum PaymentStatus {
  COMPLETE
  INCOMPLETE
}

enum DiscountType {
  NORMAL
  SNACK_BOX
}

enum SnackBoxPackageType {
  PAPER_BAG
  SNACK_BOX_S
  SNACK_BOX_M
}

enum SnackBoxBeverage {
  INCLUDE
  EXCLUDE
  NONE
}

enum SnackBoxType {
  PRESET
  CUSTOM
}
