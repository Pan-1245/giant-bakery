generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String           @id @default(uuid())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  phone          String?
  role           Role             @default(CUSTOMER)
  accounts       Account[]
  addresses      CustomerAddress?
  orders         Order?
  sessions       Session[]
}

model VerificationToken {
  identifier String   @id @default(uuid())
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  type      CartType
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[]
}

model CartItem {
  id            String       @id @default(uuid())
  quantity      Int
  type          CartItemType
  presetCakesId String?
  customCakeId  String?      @unique
  refreshmentId String?      @unique
  snackBoxId    String?      @unique
  cartId        String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime?    @updatedAt
  cart          Cart         @relation(fields: [cartId], references: [id], onDelete: Cascade)
  customCake    CustomCake?  @relation(fields: [customCakeId], references: [id], onDelete: Cascade)
  presetCake    Cake?        @relation(fields: [presetCakesId], references: [id], onDelete: Cascade)
  refreshment   Refreshment? @relation(fields: [refreshmentId], references: [id], onDelete: Cascade)
  snackBox      SnackBox?    @relation(fields: [snackBoxId], references: [id], onDelete: Cascade)
}

model CustomerAddress {
  id          String @id @default(uuid())
  cFirstName  String
  cLastName   String
  address     String
  district    String
  subdistrict String
  province    String
  postcode    String
  phone       String
  userId      String @unique
  user        User   @relation(fields: [userId], references: [id])
}

model Cake {
  id            String       @id @default(uuid())
  name          String
  imageFileName String?
  image         String?
  type          CakeType
  price         Float
  weight        Float
  height        Float
  length        Float
  width         Float
  isActive      Boolean
  isDeleted     Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  deletedAt     DateTime?
  quantity      Int          @default(0)
  remark        String?
  unitTypeId    String?
  unitType      UnitType?    @relation(fields: [unitTypeId], references: [id])
  cartItems     CartItem[]
  CustomCake    CustomCake[]
  orderItems    OrderItem[]
  variants      Variant[]    @relation("CakeToVariant")
}

model CustomCake {
  id         String      @id @default(uuid())
  name       String
  price      Float
  isActive   Boolean     @default(true)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  cakeId     String
  cartItems  CartItem?
  cake       Cake        @relation(fields: [cakeId], references: [id])
  orderItems OrderItem[]
  variants   Variant[]   @relation("CustomCakeToVariant")
}

model Variant {
  id            String       @id @default(uuid())
  name          String
  imageFileName String?
  image         String?
  type          VariantType
  isActive      Boolean
  isVisualized  Boolean
  isDeleted     Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  deletedAt     DateTime?
  cakes         Cake[]       @relation("CakeToVariant")
  customCakes   CustomCake[] @relation("CustomCakeToVariant")
}

model Refreshment {
  id            String                @id @default(uuid())
  name          String
  description   String?
  imageFileName String?
  image         String?
  type          RefreshmentType
  category      RefreshmentCategory?
  status        StockStatus
  minQty        Int
  maxQty        Int
  currQty       Int
  weight        Float
  height        Float
  length        Float
  width         Float
  price         Float
  isActive      Boolean
  isDeleted     Boolean               @default(false)
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  deletedAt     DateTime?
  quantity      Int                   @default(0)
  remark        String?
  unitTypeId    String?
  cartItems     CartItem?
  orderItems    OrderItem[]
  unitType      UnitType?             @relation(fields: [unitTypeId], references: [id])
  snackBoxes    SnackBoxRefreshment[]
}

model SnackBox {
  price        Float
  beverage     SnackBoxBeverage      @default(NONE)
  id           String                @id @default(uuid())
  packageType  SnackBoxPackageType   @default(SNACK_BOX_S)
  cartItems    CartItem?
  orderItems   OrderItem[]
  refreshments SnackBoxRefreshment[]
}

model SnackBoxRefreshment {
  id            String      @id @default(uuid())
  refreshmentId String
  snackBoxId    String
  refreshment   Refreshment @relation(fields: [refreshmentId], references: [id])
  snackBox      SnackBox    @relation(fields: [snackBoxId], references: [id])
}

model Order {
  id          String       @id @default(uuid())
  weight      Float
  width       Float
  length      Float
  height      Float
  price       Float
  type        OrderType
  delivery    DeliveryType
  receivedVia ReceivedVia
  status      OrderStatus
  orderedAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String       @unique
  paymentId   String
  discountId  String
  discount    Discount     @relation(fields: [discountId], references: [id])
  payment     Payment      @relation(fields: [paymentId], references: [id])
  user        User         @relation(fields: [userId], references: [id])
  orderItems  OrderItem[]
}

model OrderItem {
  id           String      @id @default(uuid())
  qty          Int
  price        Float
  cakeId       String
  snackId      String
  customCakeId String
  snackBoxId   String
  orderId      String?
  cake         Cake        @relation(fields: [cakeId], references: [id])
  customCake   CustomCake  @relation(fields: [customCakeId], references: [id])
  order        Order?      @relation(fields: [orderId], references: [id])
  snackBox     SnackBox    @relation(fields: [snackBoxId], references: [id])
  refreshment  Refreshment @relation(fields: [snackId], references: [id])
}

model UnitType {
  id          String        @id @default(uuid())
  name_th     String
  cake        Cake[]
  refreshment Refreshment[]
}

model Payment {
  id        String        @id @default(uuid())
  amount    Float
  provider  String
  type      PaymentType
  status    PaymentStatus
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  order     Order[]
}

model Discount {
  id        String       @id @default(uuid())
  condition String
  pct       String
  type      DiscountType
  isActive  Boolean
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  order     Order[]
}

enum Role {
  CUSTOMER
  ADMIN
}

enum RefreshmentType {
  BAKERY
  BEVERAGE
}

enum RefreshmentCategory {
  BREAD
  PIE
  COOKIE
  SNACK
}

enum CakeType {
  CUSTOM
  PRESET
}

enum CartItemType {
  PRESET_CAKE
  CUSTOM_CAKE
  REFRESHMENT
  SNACK_BOX
}

enum CartType {
  MEMBER
  GUEST
}

enum VariantType {
  BASE
  FILLINGS
  FROSTINGS
  CREAM
}

enum StockStatus {
  IN_STOCK
  LOW
  OUT_OF_STOCK
}

enum OrderType {
  WHOLESALE
  RETAIL
}

enum ReceivedVia {
  PICK_UP
  DELIVERY
}

enum DeliveryType {
  NORMAL
  CONTROL
}

enum OrderStatus {
  PENDING_ORDER
  ON_PROCESS
  PENDING_PAYMENT
  PENDING_DELIVERY
  COMPLETED
  CANCELLED
}

enum PaymentType {
  FULL_PAYMENT
  PARTIAL_PAYMENT
}

enum PaymentStatus {
  COMPLETE
  INCOMPLETE
}

enum DiscountType {
  NORMAL
  SNACK_BOX
}

enum SnackBoxPackageType {
  PAPER_BAG
  SNACK_BOX_S
  SNACK_BOX_M
}

enum SnackBoxBeverage {
  INCLUDE
  EXCLUDE
  NONE
}
