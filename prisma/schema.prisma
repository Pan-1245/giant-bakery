// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Auth Model ----------------------------------------------------------------------

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String            @id @default(uuid())
  name           String?
  email          String?           @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  phone          String?
  role           Role              @default(CUSTOMER)
  accounts       Account[]
  sessions       Session[]
  orders         Order[]
  addresses      CustomerAddress[]
}

model VerificationToken {
  identifier String   @id @default(uuid())
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// System Model ----------------------------------------------------------------------

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  type      CartType
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[]
}

model CartItem {
  id            String       @id @default(uuid())
  quantity      Int
  type          CartItemType
  presetCakesId String?
  presetCake    Cake?        @relation(fields: [presetCakesId], references: [id], onDelete: Cascade)
  customCakeId  String?      @unique
  customCake    CustomCake?  @relation(fields: [customCakeId], references: [id], onDelete: Cascade)
  refreshmentId String?      @unique
  refreshment   Refreshment? @relation(fields: [refreshmentId], references: [id], onDelete: Cascade)
  snackBoxId    String?      @unique
  snackBox      SnackBox?    @relation(fields: [snackBoxId], references: [id], onDelete: Cascade)
  cartId        String
  cart          Cart         @relation(fields: [cartId], references: [id], onDelete: Cascade)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime?    @updatedAt
}

model CustomerAddress {
  id          String @id @default(uuid())
  cFirstName  String
  cLastName   String
  address     String
  district    String
  subdistrict String
  province    String
  postcode    String
  phone       String

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Cake {
  id            String    @id @default(uuid())
  name          String
  remark        String?
  quantity      Int       @default(0)
  imageFileName String?
  imagePath     String?
  image         String?
  type          CakeType
  price         Float
  weight        Float
  height        Float
  length        Float
  width         Float
  isActive      Boolean
  isDeleted     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  unitType   UnitType?         @relation(fields: [unitTypeId], references: [id])
  unitTypeId String?
  variants   Variant[]
  cartItems  CartItem[]
  customCake CustomCake[]
  orderCake  OrderPresetCake[]
}

model CustomCake {
  id        String   @id @default(uuid())
  name      String
  price     Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cakeId          String
  cake            Cake              @relation(fields: [cakeId], references: [id])
  variants        Variant[]
  cartItems       CartItem?
  orderCustomCake OrderCustomCake[]
}

model Variant {
  id            String      @id @default(uuid())
  name          String
  imageFileName String?
  imagePath     String?
  image         String?
  type          VariantType
  isActive      Boolean
  isVisualized  Boolean
  isDeleted     Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  deletedAt     DateTime?

  cakes           Cake[]
  customCakes     CustomCake[]
  orderCake       OrderPresetCake[]
  orderCustomCake OrderCustomCake[]
}

model Refreshment {
  id            String               @id @default(uuid())
  name          String
  description   String?
  remark        String?
  quantity      Int                  @default(0)
  imageFileName String?
  imagePath     String?
  image         String?
  type          RefreshmentType
  category      RefreshmentCategory?
  status        StockStatus
  minQty        Int
  maxQty        Int
  currQty       Int
  weight        Float
  height        Float
  length        Float
  width         Float
  price         Float
  isActive      Boolean
  isDeleted     Boolean              @default(false)
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  deletedAt     DateTime?

  unitType   UnitType?             @relation(fields: [unitTypeId], references: [id])
  unitTypeId String?
  snackBoxes SnackBoxRefreshment[]
  cartItems  CartItem[]
}

model SnackBox {
  id           String                @id @default(uuid())
  price        Float
  packageType  SnackBoxPackageType   @default(SNACK_BOX_S)
  beverage     SnackBoxBeverage      @default(NONE)
  cartItems    CartItem?
  refreshments SnackBoxRefreshment[]
}

model SnackBoxRefreshment {
  id            String      @id @default(uuid())
  refreshmentId String
  refreshment   Refreshment @relation(fields: [refreshmentId], references: [id])
  snackBoxId    String
  snackBox      SnackBox    @relation(fields: [snackBoxId], references: [id])
}

model Order {
  id            String       @id @default(uuid())
  type          OrderType
  delivery      DeliveryType
  receivedVia   ReceivedVia
  status        OrderStatus
  subTotalPrice Float
  discountPrice Float
  shippingFee   Float
  totalPrice    Float
  orderedAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  user     User       @relation(fields: [userId], references: [id])
  payment  Payment[]
  discount Discount[]
  userId   String     @unique
  remark   String?

  // Address
  cFirstName       String
  cLastName        String
  address          String
  district         String
  subdistrict      String
  province         String
  postcode         String
  phone            String
  orderPresetCake  OrderPresetCake[]
  orderCustomCake  OrderCustomCake[]
  orderRefreshment OrderRefreshment[]
}

model OrderPresetCake {
  id            String  @id @default(uuid())
  qty           Int
  name          String
  remark        String?
  quantity      Int     @default(0)
  imageFileName String?
  imagePath     String?
  image         String?
  price         Float
  weight        Float
  height        Float
  length        Float
  width         Float

  variants   Variant[]
  order      Order     @relation(fields: [orderId], references: [id])
  orderId    String
  cake       Cake      @relation(fields: [cakeId], references: [id])
  cakeId     String
  unitType   UnitType? @relation(fields: [unitTypeId], references: [id])
  unitTypeId String?
}

model OrderCustomCake {
  id            String  @id @default(uuid())
  qty           Int
  name          String
  remark        String?
  quantity      Int     @default(0)
  imageFileName String?
  imagePath     String?
  image         String?
  price         Float
  weight        Float
  height        Float
  length        Float
  width         Float

  variants     Variant[]
  order        Order      @relation(fields: [orderId], references: [id])
  orderId      String
  customCake   CustomCake @relation(fields: [customCakeId], references: [id])
  customCakeId String
  unitType     UnitType?  @relation(fields: [unitTypeId], references: [id])
  unitTypeId   String?
}

model OrderRefreshment {
  id            String               @id @default(uuid())
  qty           Int
  name          String
  description   String?
  remark        String?
  quantity      Int                  @default(0)
  imageFileName String?
  imagePath     String?
  image         String?
  type          RefreshmentType
  category      RefreshmentCategory?
  weight        Float
  height        Float
  length        Float
  width         Float
  price         Float

  order      Order     @relation(fields: [orderId], references: [id])
  orderId    String
  unitType   UnitType? @relation(fields: [unitTypeId], references: [id])
  unitTypeId String?
}

model OrderSnackBox {
  id           String                     @id @default(uuid())
  qty          Int
  price        Float
  packageType  SnackBoxPackageType        @default(SNACK_BOX_S)
  beverage     SnackBoxBeverage           @default(NONE)
  refreshments OrderSnackBoxRefreshment[]
}

model OrderSnackBoxRefreshment {
  id              String               @id @default(uuid())
  name            String
  description     String?
  remark          String?
  quantity        Int                  @default(0)
  imageFileName   String?
  imagePath       String?
  image           String?
  type            RefreshmentType
  category        RefreshmentCategory?
  weight          Float
  height          Float
  length          Float
  width           Float
  price           Float
  OrderSnackBox   OrderSnackBox?       @relation(fields: [orderSnackBoxId], references: [id])
  orderSnackBoxId String?
  unitType        UnitType?            @relation(fields: [unitTypeId], references: [id])
  unitTypeId      String?
}

model UnitType {
  id                       String                     @id @default(uuid())
  name_th                  String
  refreshment              Refreshment[]
  cake                     Cake[]
  orderPresetCake          OrderPresetCake[]
  orderCustomCake          OrderCustomCake[]
  orderRefreshment         OrderRefreshment[]
  orderSnackBoxRefreshment OrderSnackBoxRefreshment[]
}

model Payment {
  id        String        @id @default(uuid())
  amount    Float
  provider  String
  type      PaymentType
  status    PaymentStatus
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  order     Order         @relation(fields: [orderId], references: [id])
  orderId   String
}

model Discount {
  id        String       @id @default(uuid())
  condition String
  pct       String // percentage
  type      DiscountType
  isActive  Boolean
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  order     Order[]
}

// Enum -----------------------------------------------------------------------------------

enum Role {
  CUSTOMER
  ADMIN
}

enum RefreshmentType {
  BAKERY
  BEVERAGE
}

enum RefreshmentCategory {
  BREAD
  PIE
  COOKIE
  SNACK
}

enum CakeType {
  CUSTOM
  PRESET
}

enum CartItemType {
  PRESET_CAKE
  CUSTOM_CAKE
  REFRESHMENT
  SNACK_BOX
}

enum CartType {
  MEMBER
  GUEST
}

enum VariantType {
  BASE
  FILLINGS
  FROSTINGS
  CREAM
}

enum StockStatus {
  IN_STOCK
  LOW
  OUT_OF_STOCK
}

enum OrderType {
  WHOLESALE
  RETAIL
}

enum ReceivedVia {
  PICK_UP
  DELIVERY
}

enum DeliveryType {
  NORMAL
  CONTROL // Temprature control.
}

enum OrderStatus {
  PENDING_ORDER
  ON_PROCESS
  PENDING_PAYMENT
  PENDING_DELIVERY
  COMPLETED
  CANCELLED
}

enum PaymentType {
  FULL_PAYMENT
  PARTIAL_PAYMENT
}

enum PaymentStatus {
  COMPLETE
  INCOMPLETE
}

enum DiscountType {
  NORMAL
  SNACK_BOX
}

enum SnackBoxPackageType {
  PAPER_BAG
  SNACK_BOX_S
  SNACK_BOX_M
}

enum SnackBoxBeverage {
  INCLUDE
  EXCLUDE
  NONE
}
